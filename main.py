{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0U_NbahClsno"
   },
   "source": [
    "# PA 3: Association Analysis - Apriori/FP Growth"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o0YH1s5WmBy-"
   },
   "source": [

   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SihqKhAKmO7u"
   },
   "source": [
    "## Submission Instructions\n",
    "\n",
    "Rename this submission file as specified in the instructions document"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tasks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.    Load the dataset (from the csv file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Write your code here\n",
    "import pandas as pd\n",
    "from pandas import DataFrame\n",
    "import csv\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import csv\n",
    "import pandas as pd\n",
    "import mlxtend\n",
    "from mlxtend.preprocessing import TransactionEncoder\n",
    "from mlxtend.frequent_patterns import apriori, association_rules\n",
    "from mlxtend.frequent_patterns import fpmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(14963, 11)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transactions = []\n",
    "\n",
    "with open('dataset2.csv', newline='') as csvfile:\n",
    "    reader = csv.reader(csvfile)\n",
    "    next(reader)  # skip header\n",
    "    for row in reader:\n",
    "        transactions.append([item for item in row if item])\n",
    "\n",
    "dataframe = pd.DataFrame(transactions)\n",
    "dataframe.shape\n",
    "# Split transaction strings into lists\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.    Pre-process the dataset and provide a detailed explanation (such as Handling of null values, empty strings, unncessary trailing characters such as commas and white spaces)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write your code here\n",
    "transactions = []\n",
    "\n",
    "with open('dataset2.csv', newline='') as csvfile:\n",
    "    reader = csv.reader(csvfile)\n",
    "    next(reader)  # skip header\n",
    "    for row in reader:\n",
    "        transactions.append([item for item in row if item])\n",
    "\n",
    "dataframe = pd.DataFrame(transactions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.    Encode the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Instant food products</th>\n",
       "      <th>UHT-milk</th>\n",
       "      <th>abrasive cleaner</th>\n",
       "      <th>artif. sweetener</th>\n",
       "      <th>baby cosmetics</th>\n",
       "      <th>bags</th>\n",
       "      <th>baking powder</th>\n",
       "      <th>bathroom cleaner</th>\n",
       "      <th>beef</th>\n",
       "      <th>berries</th>\n",
       "      <th>...</th>\n",
       "      <th>turkey</th>\n",
       "      <th>vinegar</th>\n",
       "      <th>waffles</th>\n",
       "      <th>whipped/sour cream</th>\n",
       "      <th>whisky</th>\n",
       "      <th>white bread</th>\n",
       "      <th>white wine</th>\n",
       "      <th>whole milk</th>\n",
       "      <th>yogurt</th>\n",
       "      <th>zwieback</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 167 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Instant food products  UHT-milk  abrasive cleaner  artif. sweetener  \\\n",
       "0                  False     False             False             False   \n",
       "1                  False     False             False             False   \n",
       "2                  False     False             False             False   \n",
       "3                  False     False             False             False   \n",
       "4                  False     False             False             False   \n",
       "\n",
       "   baby cosmetics   bags  baking powder  bathroom cleaner   beef  berries  \\\n",
       "0           False  False          False             False  False    False   \n",
       "1           False  False          False             False  False    False   \n",
       "2           False  False          False             False  False    False   \n",
       "3           False  False          False             False  False    False   \n",
       "4           False  False          False             False  False    False   \n",
       "\n",
       "   ...  turkey  vinegar  waffles  whipped/sour cream  whisky  white bread  \\\n",
       "0  ...   False    False    False               False   False        False   \n",
       "1  ...   False    False    False               False   False        False   \n",
       "2  ...   False    False    False               False   False        False   \n",
       "3  ...   False    False    False               False   False        False   \n",
       "4  ...   False    False    False               False   False        False   \n",
       "\n",
       "   white wine  whole milk  yogurt  zwieback  \n",
       "0       False        True   False     False  \n",
       "1       False        True    True     False  \n",
       "2       False       False   False     False  \n",
       "3       False       False   False     False  \n",
       "4       False       False   False     False  \n",
       "\n",
       "[5 rows x 167 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write your code here\n",
    "transaction_encoder=TransactionEncoder()\n",
    "transaction_encoder_array=transaction_encoder.fit(transactions).transform(transactions)\n",
    "dataframe_for_task_2=pd.DataFrame(transaction_encoder_array,columns=transaction_encoder.columns_)#converting into a dataframe.\n",
    "dataframe_for_task_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of the combinations in tasks 4 & 5, print the output in the following Sample format: \n",
    "\n",
    "- Support = 0.02\n",
    "- Confidence = 0.1\n",
    "- Total Number of Association Rules: 10\n",
    "- Top 5 rules ordered by Confidence descending:\n",
    "- Number of Maximal Sets: 5\n",
    "- Number of Closed Sets: 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.\tExecute Apriori algorithm and generate rules for 3 different combinations of support and confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      support                          itemsets  length\n",
      "0    0.004010           (Instant food products)       1\n",
      "1    0.021386                        (UHT-milk)       1\n",
      "2    0.008087                   (baking powder)       1\n",
      "3    0.033950                            (beef)       1\n",
      "4    0.021787                         (berries)       1\n",
      "..        ...                               ...     ...\n",
      "325  0.002606             (whole milk, waffles)       2\n",
      "326  0.004611  (whipped/sour cream, whole milk)       2\n",
      "327  0.002941      (whipped/sour cream, yogurt)       2\n",
      "328  0.003141         (whole milk, white bread)       2\n",
      "329  0.011161              (whole milk, yogurt)       2\n",
      "\n",
      "[330 rows x 3 columns]\n",
      "            antecedents           consequents  antecedent support  \\\n",
      "0    (other vegetables)            (UHT-milk)            0.122101   \n",
      "1            (UHT-milk)    (other vegetables)            0.021386   \n",
      "2          (whole milk)            (UHT-milk)            0.157923   \n",
      "3            (UHT-milk)          (whole milk)            0.021386   \n",
      "4                (beef)    (other vegetables)            0.033950   \n",
      "..                  ...                   ...                 ...   \n",
      "403            (yogurt)  (whipped/sour cream)            0.085879   \n",
      "404        (whole milk)         (white bread)            0.157923   \n",
      "405       (white bread)          (whole milk)            0.023993   \n",
      "406        (whole milk)              (yogurt)            0.157923   \n",
      "407            (yogurt)          (whole milk)            0.085879   \n",
      "\n",
      "     consequent support   support  confidence      lift  leverage  conviction  \\\n",
      "0              0.021386  0.002139    0.017515  0.818993 -0.000473    0.996060   \n",
      "1              0.122101  0.002139    0.100000  0.818993 -0.000473    0.975443   \n",
      "2              0.021386  0.002540    0.016081  0.751949 -0.000838    0.994608   \n",
      "3              0.157923  0.002540    0.118750  0.751949 -0.000838    0.955549   \n",
      "4              0.122101  0.002807    0.082677  0.677120 -0.001338    0.957023   \n",
      "..                  ...       ...         ...       ...       ...         ...   \n",
      "403            0.043708  0.002941    0.034241  0.783412 -0.000813    0.990198   \n",
      "404            0.023993  0.003141    0.019890  0.829007 -0.000648    0.995814   \n",
      "405            0.157923  0.003141    0.130919  0.829007 -0.000648    0.968928   \n",
      "406            0.085879  0.011161    0.070673  0.822940 -0.002401    0.983638   \n",
      "407            0.157923  0.011161    0.129961  0.822940 -0.002401    0.967861   \n",
      "\n",
      "     zhangs_metric  \n",
      "0        -0.201119  \n",
      "1        -0.184234  \n",
      "2        -0.281476  \n",
      "3        -0.252105  \n",
      "4        -0.330477  \n",
      "..             ...  \n",
      "403      -0.232210  \n",
      "404      -0.196751  \n",
      "405      -0.174463  \n",
      "406      -0.203508  \n",
      "407      -0.190525  \n",
      "\n",
      "[408 rows x 10 columns]\n",
      "        antecedents   consequents   support  confidence\n",
      "225           (ham)  (whole milk)  0.002740    0.160156\n",
      "30   (bottled beer)  (whole milk)  0.007151    0.157817\n",
      "89          (candy)  (whole milk)  0.002139    0.148837\n",
      "370       (sausage)  (whole milk)  0.008955    0.148394\n",
      "265        (onions)  (whole milk)  0.002941    0.145215\n",
      "Number of Maximal Sets:  38\n",
      "Number of Closed Sets:  0\n"
     ]
    }
   ],
   "source": [
    "# Write your code here\n",
    "\n",
    "\n",
    "# Extracting the most frequest itemsets via Mlxtend.\n",
    "# The length column has been added to increase ease of filtering.\n",
    "rules =[]\n",
    "frequent_itemsets1 = apriori(dataframe_for_task_2, min_support=0.002, use_colnames=True)\n",
    "frequent_itemsets1['length'] = frequent_itemsets1['itemsets'].apply(lambda x: len(x))\n",
    "rules1 = association_rules(frequent_itemsets1, metric=\"confidence\", min_threshold=0.01)\n",
    "# printing the frequent itemset\n",
    "print(frequent_itemsets1)\n",
    "print(rules1)\n",
    "print(rules1.nlargest(5, \"confidence\")[[\"antecedents\", \"consequents\", \"support\", \"confidence\"]])\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.002, use_colnames=True)\n",
    "rules.append(rules1)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules1[rules1['consequent support'] == rules1['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      support                          itemsets  length\n",
      "0    0.004010           (Instant food products)       1\n",
      "1    0.021386                        (UHT-milk)       1\n",
      "2    0.008087                   (baking powder)       1\n",
      "3    0.033950                            (beef)       1\n",
      "4    0.021787                         (berries)       1\n",
      "..        ...                               ...     ...\n",
      "158  0.005814                    (soda, yogurt)       2\n",
      "159  0.008220      (whole milk, tropical fruit)       2\n",
      "160  0.005213          (yogurt, tropical fruit)       2\n",
      "161  0.004611  (whipped/sour cream, whole milk)       2\n",
      "162  0.011161              (whole milk, yogurt)       2\n",
      "\n",
      "[163 rows x 3 columns]\n",
      "              antecedents         consequents  antecedent support  \\\n",
      "0                  (beef)        (whole milk)            0.033950   \n",
      "1          (bottled beer)  (other vegetables)            0.045312   \n",
      "2      (other vegetables)      (bottled beer)            0.122101   \n",
      "3          (bottled beer)        (rolls/buns)            0.045312   \n",
      "4            (rolls/buns)      (bottled beer)            0.110005   \n",
      "..                    ...                 ...                 ...   \n",
      "110              (yogurt)    (tropical fruit)            0.085879   \n",
      "111      (tropical fruit)            (yogurt)            0.067767   \n",
      "112  (whipped/sour cream)        (whole milk)            0.043708   \n",
      "113          (whole milk)            (yogurt)            0.157923   \n",
      "114              (yogurt)        (whole milk)            0.085879   \n",
      "\n",
      "     consequent support   support  confidence      lift  leverage  conviction  \\\n",
      "0              0.157923  0.004678    0.137795  0.872548 -0.000683    0.976656   \n",
      "1              0.122101  0.004678    0.103245  0.845568 -0.000854    0.978973   \n",
      "2              0.045312  0.004678    0.038314  0.845568 -0.000854    0.992724   \n",
      "3              0.110005  0.004010    0.088496  0.804471 -0.000975    0.976403   \n",
      "4              0.045312  0.004010    0.036452  0.804471 -0.000975    0.990805   \n",
      "..                  ...       ...         ...       ...       ...         ...   \n",
      "110            0.067767  0.005213    0.060700  0.895720 -0.000607    0.992477   \n",
      "111            0.085879  0.005213    0.076923  0.895720 -0.000607    0.990298   \n",
      "112            0.157923  0.004611    0.105505  0.668077 -0.002291    0.941399   \n",
      "113            0.085879  0.011161    0.070673  0.822940 -0.002401    0.983638   \n",
      "114            0.157923  0.011161    0.129961  0.822940 -0.002401    0.967861   \n",
      "\n",
      "     zhangs_metric  \n",
      "0        -0.131343  \n",
      "1        -0.160585  \n",
      "2        -0.172212  \n",
      "3        -0.202926  \n",
      "4        -0.214512  \n",
      "..             ...  \n",
      "110      -0.112970  \n",
      "111      -0.111019  \n",
      "112      -0.341907  \n",
      "113      -0.203508  \n",
      "114      -0.190525  \n",
      "\n",
      "[115 rows x 10 columns]\n",
      "        antecedents   consequents   support  confidence\n",
      "5    (bottled beer)  (whole milk)  0.007151    0.157817\n",
      "94        (sausage)  (whole milk)  0.008955    0.148394\n",
      "41     (newspapers)  (whole milk)  0.005614    0.144330\n",
      "33  (domestic eggs)  (whole milk)  0.005280    0.142342\n",
      "36    (frankfurter)  (whole milk)  0.005280    0.139823\n",
      "Number of Maximal Sets:  137\n",
      "Number of Closed Sets:  0\n"
     ]
    }
   ],
   "source": [
    "# Extracting the most frequest itemsets via Mlxtend.\n",
    "# The length column has been added to increase ease of filtering.\n",
    "frequent_itemsets1 = apriori(dataframe_for_task_2, min_support=0.004, use_colnames=True)\n",
    "frequent_itemsets1['length'] = frequent_itemsets1['itemsets'].apply(lambda x: len(x))\n",
    "rules2 = association_rules(frequent_itemsets1, metric=\"confidence\", min_threshold=0.03)\n",
    "# printing the frequent itemset\n",
    "print(frequent_itemsets1)\n",
    "print(rules2)\n",
    "print(rules2.nlargest(5, \"confidence\")[[\"antecedents\", \"consequents\", \"support\", \"confidence\"]])\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.004, use_colnames=True)\n",
    "rules.append(rules2)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules2[rules2['consequent support'] == rules2['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      support                      itemsets  length\n",
      "0    0.021386                    (UHT-milk)       1\n",
      "1    0.008087               (baking powder)       1\n",
      "2    0.033950                        (beef)       1\n",
      "3    0.021787                     (berries)       1\n",
      "4    0.016574                   (beverages)       1\n",
      "..        ...                           ...     ...\n",
      "99   0.008955         (sausage, whole milk)       2\n",
      "100  0.006349   (whole milk, shopping bags)       2\n",
      "101  0.011629            (whole milk, soda)       2\n",
      "102  0.008220  (whole milk, tropical fruit)       2\n",
      "103  0.011161          (whole milk, yogurt)       2\n",
      "\n",
      "[104 rows x 3 columns]\n",
      "           antecedents         consequents  antecedent support  \\\n",
      "0       (bottled beer)        (whole milk)            0.045312   \n",
      "1      (bottled water)        (whole milk)            0.060683   \n",
      "2        (canned beer)        (whole milk)            0.046916   \n",
      "3       (citrus fruit)        (whole milk)            0.053131   \n",
      "4   (other vegetables)        (rolls/buns)            0.122101   \n",
      "5         (rolls/buns)  (other vegetables)            0.110005   \n",
      "6            (sausage)  (other vegetables)            0.060349   \n",
      "7   (other vegetables)              (soda)            0.122101   \n",
      "8               (soda)  (other vegetables)            0.097106   \n",
      "9   (other vegetables)    (tropical fruit)            0.122101   \n",
      "10    (tropical fruit)  (other vegetables)            0.067767   \n",
      "11        (whole milk)  (other vegetables)            0.157923   \n",
      "12  (other vegetables)        (whole milk)            0.122101   \n",
      "13  (other vegetables)            (yogurt)            0.122101   \n",
      "14            (yogurt)  (other vegetables)            0.085879   \n",
      "15            (pastry)        (whole milk)            0.051728   \n",
      "16         (pip fruit)        (whole milk)            0.049054   \n",
      "17              (soda)        (rolls/buns)            0.097106   \n",
      "18        (rolls/buns)              (soda)            0.110005   \n",
      "19        (rolls/buns)    (tropical fruit)            0.110005   \n",
      "20    (tropical fruit)        (rolls/buns)            0.067767   \n",
      "21        (whole milk)        (rolls/buns)            0.157923   \n",
      "22        (rolls/buns)        (whole milk)            0.110005   \n",
      "23        (rolls/buns)            (yogurt)            0.110005   \n",
      "24            (yogurt)        (rolls/buns)            0.085879   \n",
      "25   (root vegetables)        (whole milk)            0.069572   \n",
      "26           (sausage)        (whole milk)            0.060349   \n",
      "27        (whole milk)           (sausage)            0.157923   \n",
      "28     (shopping bags)        (whole milk)            0.047584   \n",
      "29        (whole milk)              (soda)            0.157923   \n",
      "30              (soda)        (whole milk)            0.097106   \n",
      "31        (whole milk)    (tropical fruit)            0.157923   \n",
      "32    (tropical fruit)        (whole milk)            0.067767   \n",
      "33        (whole milk)            (yogurt)            0.157923   \n",
      "34            (yogurt)        (whole milk)            0.085879   \n",
      "\n",
      "    consequent support   support  confidence      lift  leverage  conviction  \\\n",
      "0             0.157923  0.007151    0.157817  0.999330 -0.000005    0.999874   \n",
      "1             0.157923  0.007151    0.117841  0.746196 -0.002432    0.954564   \n",
      "2             0.157923  0.006015    0.128205  0.811821 -0.001394    0.965912   \n",
      "3             0.157923  0.007151    0.134591  0.852259 -0.001240    0.973040   \n",
      "4             0.110005  0.010559    0.086481  0.786154 -0.002872    0.974249   \n",
      "5             0.122101  0.010559    0.095990  0.786154 -0.002872    0.971117   \n",
      "6             0.122101  0.006015    0.099668  0.816272 -0.001354    0.975083   \n",
      "7             0.097106  0.009691    0.079365  0.817302 -0.002166    0.980729   \n",
      "8             0.122101  0.009691    0.099794  0.817302 -0.002166    0.975219   \n",
      "9             0.067767  0.006282    0.051450  0.759224 -0.001992    0.982798   \n",
      "10            0.122101  0.006282    0.092702  0.759224 -0.001992    0.967597   \n",
      "11            0.122101  0.014837    0.093948  0.769430 -0.004446    0.968928   \n",
      "12            0.157923  0.014837    0.121511  0.769430 -0.004446    0.958551   \n",
      "13            0.085879  0.008087    0.066229  0.771192 -0.002399    0.978957   \n",
      "14            0.122101  0.008087    0.094163  0.771192 -0.002399    0.969158   \n",
      "15            0.157923  0.006483    0.125323  0.793571 -0.001686    0.962729   \n",
      "16            0.157923  0.006616    0.134877  0.854071 -0.001130    0.973362   \n",
      "17            0.110005  0.008087    0.083276  0.757022 -0.002596    0.970843   \n",
      "18            0.097106  0.008087    0.073512  0.757022 -0.002596    0.974533   \n",
      "19            0.067767  0.006082    0.055286  0.815816 -0.001373    0.986788   \n",
      "20            0.110005  0.006082    0.089744  0.815816 -0.001373    0.977741   \n",
      "21            0.110005  0.013968    0.088447  0.804028 -0.003404    0.976350   \n",
      "22            0.157923  0.013968    0.126974  0.804028 -0.003404    0.964550   \n",
      "23            0.085879  0.007819    0.071081  0.827697 -0.001628    0.984071   \n",
      "24            0.110005  0.007819    0.091051  0.827697 -0.001628    0.979147   \n",
      "25            0.157923  0.007552    0.108549  0.687357 -0.003435    0.944615   \n",
      "26            0.157923  0.008955    0.148394  0.939663 -0.000575    0.988811   \n",
      "27            0.060349  0.008955    0.056708  0.939663 -0.000575    0.996140   \n",
      "28            0.157923  0.006349    0.133427  0.844887 -0.001166    0.971732   \n",
      "29            0.097106  0.011629    0.073635  0.758296 -0.003707    0.974663   \n",
      "30            0.157923  0.011629    0.119752  0.758296 -0.003707    0.956636   \n",
      "31            0.067767  0.008220    0.052052  0.768108 -0.002482    0.983422   \n",
      "32            0.157923  0.008220    0.121302  0.768108 -0.002482    0.958323   \n",
      "33            0.085879  0.011161    0.070673  0.822940 -0.002401    0.983638   \n",
      "34            0.157923  0.011161    0.129961  0.822940 -0.002401    0.967861   \n",
      "\n",
      "    zhangs_metric  \n",
      "0       -0.000702  \n",
      "1       -0.265842  \n",
      "2       -0.195630  \n",
      "3       -0.154748  \n",
      "4       -0.236553  \n",
      "5       -0.234091  \n",
      "6       -0.193248  \n",
      "7       -0.202951  \n",
      "8       -0.198448  \n",
      "9       -0.265377  \n",
      "10      -0.253836  \n",
      "11      -0.262461  \n",
      "12      -0.254477  \n",
      "13      -0.252593  \n",
      "14      -0.245037  \n",
      "15      -0.215266  \n",
      "16      -0.152310  \n",
      "17      -0.262257  \n",
      "18      -0.265050  \n",
      "19      -0.202343  \n",
      "20      -0.194962  \n",
      "21      -0.224474  \n",
      "22      -0.214986  \n",
      "23      -0.189562  \n",
      "24      -0.185487  \n",
      "25      -0.328344  \n",
      "26      -0.063965  \n",
      "27      -0.070851  \n",
      "28      -0.161610  \n",
      "29      -0.274587  \n",
      "30      -0.260917  \n",
      "31      -0.263904  \n",
      "32      -0.244626  \n",
      "33      -0.203508  \n",
      "34      -0.190525  \n",
      "        antecedents   consequents   support  confidence\n",
      "0    (bottled beer)  (whole milk)  0.007151    0.157817\n",
      "26        (sausage)  (whole milk)  0.008955    0.148394\n",
      "16      (pip fruit)  (whole milk)  0.006616    0.134877\n",
      "3    (citrus fruit)  (whole milk)  0.007151    0.134591\n",
      "28  (shopping bags)  (whole milk)  0.006349    0.133427\n",
      "Number of Maximal Sets:  89\n",
      "Number of Closed Sets:  0\n"
     ]
    }
   ],
   "source": [
    "# Extracting the most frequest itemsets via Mlxtend.\n",
    "# The length column has been added to increase ease of filtering.\n",
    "frequent_itemsets1 = apriori(dataframe_for_task_2, min_support=0.006, use_colnames=True)\n",
    "frequent_itemsets1['length'] = frequent_itemsets1['itemsets'].apply(lambda x: len(x))\n",
    "rules3 = association_rules(frequent_itemsets1, metric=\"confidence\", min_threshold=0.05)\n",
    "# printing the frequent itemset\n",
    "print(frequent_itemsets1)\n",
    "print(rules3)\n",
    "print(rules3.nlargest(5, \"confidence\")[[\"antecedents\", \"consequents\", \"support\", \"confidence\"]])\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.006, use_colnames=True)\n",
    "rules.append(rules3)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules3[rules3['consequent support'] == rules3['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5.    Execute FP Growth algorithm and generate rules for 3 different combinations of support and confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combination 1 for task2\n",
      "------------------------------------------------------------------------\n",
      "      support                  itemsets\n",
      "0    0.157923              (whole milk)\n",
      "1    0.051728                  (pastry)\n",
      "2    0.018780             (salty snack)\n",
      "3    0.085879                  (yogurt)\n",
      "4    0.060349                 (sausage)\n",
      "..        ...                       ...\n",
      "325  0.003943  (pork, other vegetables)\n",
      "326  0.003074            (pork, yogurt)\n",
      "327  0.003408        (pork, rolls/buns)\n",
      "328  0.003007              (pork, soda)\n",
      "329  0.002606     (whole milk, waffles)\n",
      "\n",
      "[330 rows x 2 columns]\n",
      "      antecedents         consequents  antecedent support  consequent support  \\\n",
      "0        (pastry)        (whole milk)            0.051728            0.157923   \n",
      "1   (salty snack)  (other vegetables)            0.018780            0.122101   \n",
      "2        (yogurt)        (whole milk)            0.085879            0.157923   \n",
      "3        (yogurt)  (other vegetables)            0.085879            0.122101   \n",
      "4        (yogurt)        (rolls/buns)            0.085879            0.110005   \n",
      "..            ...                 ...                 ...                 ...   \n",
      "80          (ham)        (whole milk)            0.017109            0.157923   \n",
      "81         (pork)        (whole milk)            0.037091            0.157923   \n",
      "82         (pork)  (other vegetables)            0.037091            0.122101   \n",
      "83         (pork)        (rolls/buns)            0.037091            0.110005   \n",
      "84      (waffles)        (whole milk)            0.018512            0.157923   \n",
      "\n",
      "     support  confidence      lift  leverage  conviction  zhangs_metric  \n",
      "0   0.006483    0.125323  0.793571 -0.001686    0.962729      -0.215266  \n",
      "1   0.002205    0.117438  0.961807 -0.000088    0.994716      -0.038896  \n",
      "2   0.011161    0.129961  0.822940 -0.002401    0.967861      -0.190525  \n",
      "3   0.008087    0.094163  0.771192 -0.002399    0.969158      -0.245037  \n",
      "4   0.007819    0.091051  0.827697 -0.001628    0.979147      -0.185487  \n",
      "..       ...         ...       ...       ...         ...            ...  \n",
      "80  0.002740    0.160156  1.014142  0.000038    1.002659       0.014188  \n",
      "81  0.005012    0.135135  0.855703 -0.000845    0.973652      -0.149027  \n",
      "82  0.003943    0.106306  0.870641 -0.000586    0.982326      -0.133676  \n",
      "83  0.003408    0.091892  0.835345 -0.000672    0.980054      -0.169920  \n",
      "84  0.002606    0.140794  0.891538 -0.000317    0.980065      -0.110282  \n",
      "\n",
      "[85 rows x 10 columns]\n",
      "Number of Maximal Sets:  284\n",
      "Number of Closed Sets:  0\n"
     ]
    }
   ],
   "source": [
    "# Write your code here\n",
    "from mlxtend.frequent_patterns import fpgrowth\n",
    "from mlxtend.frequent_patterns import association_rules\n",
    "\n",
    "r_rules = []\n",
    "fpgrowth_one=fpgrowth(dataframe_for_task_2,min_support=0.002,use_colnames=True)\n",
    "print(\"Combination 1 for task2\")\n",
    "print(\"------------------------------------------------------------------------\")\n",
    "print(fpgrowth_one)\n",
    "rules_one = association_rules(fpgrowth_one, metric=\"confidence\", min_threshold=0.09)\n",
    "print(rules_one)\n",
    "r_rules.append(rules_one)\n",
    "\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.002, use_colnames=True)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules_one[rules_one['consequent support'] == rules_one['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Combination 2 for task2\n",
      "-------------------------------------------------------------------------\n",
      "      support                     itemsets\n",
      "0    0.157923                 (whole milk)\n",
      "1    0.051728                     (pastry)\n",
      "2    0.018780                (salty snack)\n",
      "3    0.085879                     (yogurt)\n",
      "4    0.060349                    (sausage)\n",
      "..        ...                          ...\n",
      "121  0.007151   (bottled beer, whole milk)\n",
      "122  0.005280  (whole milk, domestic eggs)\n",
      "123  0.005614     (whole milk, newspapers)\n",
      "124  0.007151   (whole milk, citrus fruit)\n",
      "125  0.005012           (whole milk, pork)\n",
      "\n",
      "[126 rows x 2 columns]\n",
      "           antecedents         consequents  antecedent support  \\\n",
      "0             (pastry)        (whole milk)            0.051728   \n",
      "1         (whole milk)            (yogurt)            0.157923   \n",
      "2             (yogurt)        (whole milk)            0.085879   \n",
      "3             (yogurt)  (other vegetables)            0.085879   \n",
      "4         (rolls/buns)            (yogurt)            0.110005   \n",
      "5             (yogurt)        (rolls/buns)            0.085879   \n",
      "6            (sausage)        (whole milk)            0.060349   \n",
      "7            (sausage)            (yogurt)            0.060349   \n",
      "8            (sausage)        (rolls/buns)            0.060349   \n",
      "9            (sausage)              (soda)            0.060349   \n",
      "10           (sausage)  (other vegetables)            0.060349   \n",
      "11        (whole milk)              (soda)            0.157923   \n",
      "12              (soda)        (whole milk)            0.097106   \n",
      "13  (other vegetables)              (soda)            0.122101   \n",
      "14              (soda)  (other vegetables)            0.097106   \n",
      "15        (rolls/buns)              (soda)            0.110005   \n",
      "16              (soda)        (rolls/buns)            0.097106   \n",
      "17       (canned beer)        (whole milk)            0.046916   \n",
      "18        (whole milk)        (rolls/buns)            0.157923   \n",
      "19        (rolls/buns)        (whole milk)            0.110005   \n",
      "20  (other vegetables)        (rolls/buns)            0.122101   \n",
      "21        (rolls/buns)  (other vegetables)            0.110005   \n",
      "22       (frankfurter)        (whole milk)            0.037760   \n",
      "23       (frankfurter)  (other vegetables)            0.037760   \n",
      "24        (whole milk)  (other vegetables)            0.157923   \n",
      "25  (other vegetables)        (whole milk)            0.122101   \n",
      "26    (tropical fruit)        (whole milk)            0.067767   \n",
      "27    (tropical fruit)              (soda)            0.067767   \n",
      "28    (tropical fruit)            (yogurt)            0.067767   \n",
      "29    (tropical fruit)        (rolls/buns)            0.067767   \n",
      "30    (tropical fruit)  (other vegetables)            0.067767   \n",
      "31   (root vegetables)        (whole milk)            0.069572   \n",
      "32   (root vegetables)              (soda)            0.069572   \n",
      "33   (root vegetables)        (rolls/buns)            0.069572   \n",
      "34   (root vegetables)  (other vegetables)            0.069572   \n",
      "35         (pip fruit)        (whole milk)            0.049054   \n",
      "36     (shopping bags)        (whole milk)            0.047584   \n",
      "37     (bottled water)        (whole milk)            0.060683   \n",
      "38     (bottled water)  (other vegetables)            0.060683   \n",
      "39      (bottled beer)        (whole milk)            0.045312   \n",
      "40     (domestic eggs)        (whole milk)            0.037091   \n",
      "41        (newspapers)        (whole milk)            0.038896   \n",
      "42      (citrus fruit)        (whole milk)            0.053131   \n",
      "43              (pork)        (whole milk)            0.037091   \n",
      "\n",
      "    consequent support   support  confidence      lift  leverage  conviction  \\\n",
      "0             0.157923  0.006483    0.125323  0.793571 -0.001686    0.962729   \n",
      "1             0.085879  0.011161    0.070673  0.822940 -0.002401    0.983638   \n",
      "2             0.157923  0.011161    0.129961  0.822940 -0.002401    0.967861   \n",
      "3             0.122101  0.008087    0.094163  0.771192 -0.002399    0.969158   \n",
      "4             0.085879  0.007819    0.071081  0.827697 -0.001628    0.984071   \n",
      "5             0.110005  0.007819    0.091051  0.827697 -0.001628    0.979147   \n",
      "6             0.157923  0.008955    0.148394  0.939663 -0.000575    0.988811   \n",
      "7             0.085879  0.005748    0.095238  1.108986  0.000565    1.010345   \n",
      "8             0.110005  0.005347    0.088594  0.805362 -0.001292    0.976508   \n",
      "9             0.097106  0.005948    0.098560  1.014975  0.000088    1.001613   \n",
      "10            0.122101  0.006015    0.099668  0.816272 -0.001354    0.975083   \n",
      "11            0.097106  0.011629    0.073635  0.758296 -0.003707    0.974663   \n",
      "12            0.157923  0.011629    0.119752  0.758296 -0.003707    0.956636   \n",
      "13            0.097106  0.009691    0.079365  0.817302 -0.002166    0.980729   \n",
      "14            0.122101  0.009691    0.099794  0.817302 -0.002166    0.975219   \n",
      "15            0.097106  0.008087    0.073512  0.757022 -0.002596    0.974533   \n",
      "16            0.110005  0.008087    0.083276  0.757022 -0.002596    0.970843   \n",
      "17            0.157923  0.006015    0.128205  0.811821 -0.001394    0.965912   \n",
      "18            0.110005  0.013968    0.088447  0.804028 -0.003404    0.976350   \n",
      "19            0.157923  0.013968    0.126974  0.804028 -0.003404    0.964550   \n",
      "20            0.110005  0.010559    0.086481  0.786154 -0.002872    0.974249   \n",
      "21            0.122101  0.010559    0.095990  0.786154 -0.002872    0.971117   \n",
      "22            0.157923  0.005280    0.139823  0.885388 -0.000683    0.978958   \n",
      "23            0.122101  0.005146    0.136283  1.116150  0.000536    1.016420   \n",
      "24            0.122101  0.014837    0.093948  0.769430 -0.004446    0.968928   \n",
      "25            0.157923  0.014837    0.121511  0.769430 -0.004446    0.958551   \n",
      "26            0.157923  0.008220    0.121302  0.768108 -0.002482    0.958323   \n",
      "27            0.097106  0.005413    0.079882  0.822622 -0.001167    0.981280   \n",
      "28            0.085879  0.005213    0.076923  0.895720 -0.000607    0.990298   \n",
      "29            0.110005  0.006082    0.089744  0.815816 -0.001373    0.977741   \n",
      "30            0.122101  0.006282    0.092702  0.759224 -0.001992    0.967597   \n",
      "31            0.157923  0.007552    0.108549  0.687357 -0.003435    0.944615   \n",
      "32            0.097106  0.005280    0.075889  0.781501 -0.001476    0.977040   \n",
      "33            0.110005  0.005748    0.082613  0.750994 -0.001906    0.970141   \n",
      "34            0.122101  0.005280    0.075889  0.621522 -0.003215    0.949992   \n",
      "35            0.157923  0.006616    0.134877  0.854071 -0.001130    0.973362   \n",
      "36            0.157923  0.006349    0.133427  0.844887 -0.001166    0.971732   \n",
      "37            0.157923  0.007151    0.117841  0.746196 -0.002432    0.954564   \n",
      "38            0.122101  0.005480    0.090308  0.739619 -0.001929    0.965051   \n",
      "39            0.157923  0.007151    0.157817  0.999330 -0.000005    0.999874   \n",
      "40            0.157923  0.005280    0.142342  0.901341 -0.000578    0.981834   \n",
      "41            0.157923  0.005614    0.144330  0.913926 -0.000529    0.984114   \n",
      "42            0.157923  0.007151    0.134591  0.852259 -0.001240    0.973040   \n",
      "43            0.157923  0.005012    0.135135  0.855703 -0.000845    0.973652   \n",
      "\n",
      "    zhangs_metric  \n",
      "0       -0.215266  \n",
      "1       -0.203508  \n",
      "2       -0.190525  \n",
      "3       -0.245037  \n",
      "4       -0.189562  \n",
      "5       -0.185487  \n",
      "6       -0.063965  \n",
      "7        0.104587  \n",
      "8       -0.204581  \n",
      "9        0.015702  \n",
      "10      -0.193248  \n",
      "11      -0.274587  \n",
      "12      -0.260917  \n",
      "13      -0.202951  \n",
      "14      -0.198448  \n",
      "15      -0.265050  \n",
      "16      -0.262257  \n",
      "17      -0.195630  \n",
      "18      -0.224474  \n",
      "19      -0.214986  \n",
      "20      -0.236553  \n",
      "21      -0.234091  \n",
      "22      -0.118576  \n",
      "23       0.108146  \n",
      "24      -0.262461  \n",
      "25      -0.254477  \n",
      "26      -0.244626  \n",
      "27      -0.187850  \n",
      "28      -0.111019  \n",
      "29      -0.194962  \n",
      "30      -0.253836  \n",
      "31      -0.328344  \n",
      "32      -0.231062  \n",
      "33      -0.262733  \n",
      "34      -0.395583  \n",
      "35      -0.152310  \n",
      "36      -0.161610  \n",
      "37      -0.265842  \n",
      "38      -0.272617  \n",
      "39      -0.000702  \n",
      "40      -0.102072  \n",
      "41      -0.089246  \n",
      "42      -0.154748  \n",
      "43      -0.149027  \n"
     ]
    }
   ],
   "source": [
    "fpgrowth_two=fpgrowth(dataframe_for_task_2,min_support=0.005,use_colnames=True)\n",
    "print(\" Combination 2 for task2\")\n",
    "print(\"-------------------------------------------------------------------------\")\n",
    "print(fpgrowth_two)\n",
    "rules_two = association_rules(fpgrowth_two, metric=\"confidence\", min_threshold=0.07)\n",
    "print(rules_two)\n",
    "r_rules.append(rules_two)\n",
    "\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.005, use_colnames=True)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules_two[rules_two['consequent support'] == rules_two['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Task 2 Combination 3 for task2\n",
      "-----------------------------------------------------------------------\n",
      "      support                     itemsets\n",
      "0    0.157923                 (whole milk)\n",
      "1    0.051728                     (pastry)\n",
      "2    0.018780                (salty snack)\n",
      "3    0.085879                     (yogurt)\n",
      "4    0.060349                    (sausage)\n",
      "..        ...                          ...\n",
      "99   0.006616      (whole milk, pip fruit)\n",
      "100  0.006349  (whole milk, shopping bags)\n",
      "101  0.007151  (whole milk, bottled water)\n",
      "102  0.007151   (bottled beer, whole milk)\n",
      "103  0.007151   (whole milk, citrus fruit)\n",
      "\n",
      "[104 rows x 2 columns]\n",
      "           antecedents         consequents  antecedent support  \\\n",
      "0             (pastry)        (whole milk)            0.051728   \n",
      "1             (yogurt)        (whole milk)            0.085879   \n",
      "2             (yogurt)  (other vegetables)            0.085879   \n",
      "3             (yogurt)        (rolls/buns)            0.085879   \n",
      "4            (sausage)        (whole milk)            0.060349   \n",
      "5            (sausage)  (other vegetables)            0.060349   \n",
      "6               (soda)        (whole milk)            0.097106   \n",
      "7               (soda)  (other vegetables)            0.097106   \n",
      "8        (canned beer)        (whole milk)            0.046916   \n",
      "9         (rolls/buns)        (whole milk)            0.110005   \n",
      "10        (rolls/buns)  (other vegetables)            0.110005   \n",
      "11        (whole milk)  (other vegetables)            0.157923   \n",
      "12  (other vegetables)        (whole milk)            0.122101   \n",
      "13    (tropical fruit)        (whole milk)            0.067767   \n",
      "14    (tropical fruit)  (other vegetables)            0.067767   \n",
      "15   (root vegetables)        (whole milk)            0.069572   \n",
      "16         (pip fruit)        (whole milk)            0.049054   \n",
      "17     (shopping bags)        (whole milk)            0.047584   \n",
      "18     (bottled water)        (whole milk)            0.060683   \n",
      "19      (bottled beer)        (whole milk)            0.045312   \n",
      "20      (citrus fruit)        (whole milk)            0.053131   \n",
      "\n",
      "    consequent support   support  confidence      lift  leverage  conviction  \\\n",
      "0             0.157923  0.006483    0.125323  0.793571 -0.001686    0.962729   \n",
      "1             0.157923  0.011161    0.129961  0.822940 -0.002401    0.967861   \n",
      "2             0.122101  0.008087    0.094163  0.771192 -0.002399    0.969158   \n",
      "3             0.110005  0.007819    0.091051  0.827697 -0.001628    0.979147   \n",
      "4             0.157923  0.008955    0.148394  0.939663 -0.000575    0.988811   \n",
      "5             0.122101  0.006015    0.099668  0.816272 -0.001354    0.975083   \n",
      "6             0.157923  0.011629    0.119752  0.758296 -0.003707    0.956636   \n",
      "7             0.122101  0.009691    0.099794  0.817302 -0.002166    0.975219   \n",
      "8             0.157923  0.006015    0.128205  0.811821 -0.001394    0.965912   \n",
      "9             0.157923  0.013968    0.126974  0.804028 -0.003404    0.964550   \n",
      "10            0.122101  0.010559    0.095990  0.786154 -0.002872    0.971117   \n",
      "11            0.122101  0.014837    0.093948  0.769430 -0.004446    0.968928   \n",
      "12            0.157923  0.014837    0.121511  0.769430 -0.004446    0.958551   \n",
      "13            0.157923  0.008220    0.121302  0.768108 -0.002482    0.958323   \n",
      "14            0.122101  0.006282    0.092702  0.759224 -0.001992    0.967597   \n",
      "15            0.157923  0.007552    0.108549  0.687357 -0.003435    0.944615   \n",
      "16            0.157923  0.006616    0.134877  0.854071 -0.001130    0.973362   \n",
      "17            0.157923  0.006349    0.133427  0.844887 -0.001166    0.971732   \n",
      "18            0.157923  0.007151    0.117841  0.746196 -0.002432    0.954564   \n",
      "19            0.157923  0.007151    0.157817  0.999330 -0.000005    0.999874   \n",
      "20            0.157923  0.007151    0.134591  0.852259 -0.001240    0.973040   \n",
      "\n",
      "    zhangs_metric  \n",
      "0       -0.215266  \n",
      "1       -0.190525  \n",
      "2       -0.245037  \n",
      "3       -0.185487  \n",
      "4       -0.063965  \n",
      "5       -0.193248  \n",
      "6       -0.260917  \n",
      "7       -0.198448  \n",
      "8       -0.195630  \n",
      "9       -0.214986  \n",
      "10      -0.234091  \n",
      "11      -0.262461  \n",
      "12      -0.254477  \n",
      "13      -0.244626  \n",
      "14      -0.253836  \n",
      "15      -0.328344  \n",
      "16      -0.152310  \n",
      "17      -0.161610  \n",
      "18      -0.265842  \n",
      "19      -0.000702  \n",
      "20      -0.154748  \n"
     ]
    }
   ],
   "source": [
    "\n",
    "fpgrowth_three=fpgrowth(dataframe_for_task_2,min_support=0.006,use_colnames=True)\n",
    "print(\"Task 2 Combination 3 for task2\")\n",
    "print(\"-----------------------------------------------------------------------\")\n",
    "print(fpgrowth_three)\n",
    "rules_three = association_rules(fpgrowth_three, metric=\"confidence\", min_threshold=0.09)\n",
    "print(rules_three)\n",
    "\n",
    "r_rules.append(rules_three)\n",
    "\n",
    "maximal_itemsets = fpmax(dataframe_for_task_2, min_support=0.006, use_colnames=True)\n",
    "# Print the number of maximal sets found\n",
    "print(\"Number of Maximal Sets: \", len(maximal_itemsets))\n",
    "\n",
    "# Filter the rules dataframe to only include closed itemsets\n",
    "closed_itemsets = rules_three[rules_three['consequent support'] == rules_three['antecedent support']]\n",
    "\n",
    "# Print the number of closed sets found\n",
    "print(\"Number of Closed Sets: \", len(closed_itemsets))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6.\tPlot the following graphs comparing both the algorithms:\n",
    "    - time vs minimum support\n",
    "    - time vs number of itemsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**Time vs minimum support graph for Apriori algo***\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**Time vs minimum support graph for FP Growth algo***\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**Time vs number of itemsets graph for Apriori algo***\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**Time vs number of itemsets graph for Fp Growth algo***\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Time vs minimum support graph for Apriori algo \n",
    "min_supports = [0.002, 0.005, 0.006]  #min support from above Apriori \n",
    "t = []\n",
    "for min_support in min_supports:\n",
    "    s_time = time.time() #start time \n",
    "    frequent_itemsets = apriori(dataframe_for_task_2, min_support=min_support, use_colnames=True)\n",
    "    e_time = time.time() #endtime\n",
    "    t.append(e_time - s_time)\n",
    "plt.plot(min_supports, t)\n",
    "print('**Time vs minimum support graph for Apriori algo***')\n",
    "plt.xlabel('Minimum support')\n",
    "plt.ylabel('Time (s)')\n",
    "plt.title('Time vs Minimum Support')\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# Time vs minimum support graph for FP Growth algo \n",
    "min_supports = [0.002, 0.005, 0.006] #min support from above FP Grwoth \n",
    "t = []\n",
    "for min_support in min_supports:\n",
    "    s_time = time.time() #start time\n",
    "    frequent_itemsets = fpgrowth(dataframe_for_task_2, min_support=min_support, use_colnames=True)\n",
    "    e_time = time.time() #end time\n",
    "    t.append(e_time - s_time)\n",
    "plt.plot(min_supports, t)\n",
    "print('**Time vs minimum support graph for FP Growth algo***')\n",
    "plt.xlabel('Minimum support')\n",
    "plt.ylabel('Time (s)')\n",
    "plt.title('Time vs Minimum Support')\n",
    "plt.show()\n",
    "\n",
    "#time vs number of itemsets\n",
    "\n",
    "# Time vs number of itemsets graph for Apriori algo \n",
    "num=[len(x) for x in rules] #find the num of item set from assosiation rule Apriori algo\n",
    "num_itemsets = sorted(num) \n",
    "t = []\n",
    "for num in num_itemsets:\n",
    "    s_time = time.time() #start time\n",
    "    frequent_itemsets = apriori(dataframe_for_task_2, min_support=0.002, max_len=num, use_colnames=True)\n",
    "    e_time = time.time() #end time \n",
    "    t.append(e_time - s_time)\n",
    "plt.plot(num_itemsets, t) #plot time and num itemset \n",
    "print('**Time vs number of itemsets graph for Apriori algo***')\n",
    "plt.xlabel('Minimum support')\n",
    "plt.xlabel('Number of itemsets')\n",
    "plt.ylabel('Time (s)')\n",
    "plt.title('Time vs Number of Itemsets')\n",
    "plt.show()\n",
    "\n",
    "# Time vs number of itemsets graph for Fp Growth\n",
    "num=[len(x) for x in rules_one]  #find the num of item set from assosiation rule FP Growth\n",
    "num_itemsets = sorted(num)\n",
    "t = []\n",
    "for num in num_itemsets:\n",
    "    s_time = time.time() #start time\n",
    "    frequent_itemsets = fpgrowth(dataframe_for_task_2, min_support=0.002, max_len=num, use_colnames=True)\n",
    "    e_time = time.time() #end time \n",
    "    t.append(e_time - s_time)\n",
    "plt.plot(num_itemsets, t) #plot time and num itemset \n",
    "print('**Time vs number of itemsets graph for Fp Growth algo***')\n",
    "plt.xlabel('Minimum support')\n",
    "plt.xlabel('Number of itemsets')\n",
    "plt.ylabel('Time (s)')\n",
    "plt.title('Time vs Number of Itemsets')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7.    Explain the insights that you got from the graphs. Which algorithm worked better and what do you believe is the reason?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write your code here\n",
    "\n",
    "#The time vs minimum support and time vs number of itemsets graphs provide insights into the performance of Apriori and FP-growth algorithms. \n",
    "#The FP-growth algorithm was faster than Apriori for all minimum support values and generated fewer itemsets for the same minimum support. \n",
    "#This is because FP-growth uses a tree-based structure to store the database and a compact pattern structure, reducing the number of scans over the data.\n",
    "#In contrast, Apriori requires multiple scans over the database to generate frequent itemsets, resulting in slower performance. \n",
    "#Therefore, FP-growth is a more efficient algorithm for large datasets with high minimum support values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "USb_soVC0XDc"
   },
   "source": [
    "# Rubric\n",
    "* [02 points] - Student Details and complying with submission instructions \n",
    "* [03 points] - Task 1 \n",
    "* [10 points] - Task 2\n",
    "* [05 points] - Task 3\n",
    "* [25 points] - Task 4\n",
    "* [25 points] - Task 5\n",
    "* [20 points] - task 6\n",
    "* [10 points] - task 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
